{"Prompt": "hi hello hi", "Tokens": 3, "timestamp": "16-06-2025 18:27:56"}
{"Prompt": "hi my name is tanzil", "Tokens": 7, "timestamp": "18-06-2025 16:21:05"}
{"Prompt": "hi there", "Tokens": 2, "timestamp": "19-06-2025 21:20:43"}
{"Prompt": "hihi", "Tokens": 2, "timestamp": "19-06-2025 21:21:54"}
{"Prompt": "hi", "Tokens": 1, "timestamp": "19-06-2025 21:25:19"}
{"Prompt": "hihih", "Tokens": 3, "timestamp": "19-06-2025 21:26:34"}
{"Prompt": "The mitochondria is the powerhouse of the cell", "Tokens": 9, "timestamp": "19-06-2025 21:27:08"}
{"prompt": "testing if this works", "tokens": 4, "type": "command", "timestamp": "19-06-2025 21:32:52"}
{"prompt": "what is climate change", "tokens": 4, "type": "question", "timestamp": "19-06-2025 21:33:17"}
{"prompt": "explain how to start a podcast", "tokens": 6, "type": "command", "timestamp": "19-06-2025 21:33:45"}
{"prompt": "the sun is a star", "tokens": 5, "type": "question", "timestamp": "19-06-2025 21:33:58"}
{"prompt": "hi hi my name os lolol", "tokens": 7, "type": "command", "tone": "casual", "timestamp": "20-06-2025 16:05:43"}
{"prompt": "hihi byebye", "tokens": 4, "type": "command", "tone": "neutral", "timestamp": "20-06-2025 16:19:01"}
{"prompt": "i want to go homeeeeee", "tokens": 7, "type": "command", "tone": "neutral", "timestamp": "20-06-2025 16:19:13"}
{"prompt": "hi there~", "tokens": 3, "type": "command", "tone": "neutral", "timestamp": "21-06-2025 09:15:48"}
{"prompt": "hi there hello", "tokens": 3, "type": "command", "tone": "neutral", "timestamp": "21-06-2025 16:54:35"}
{"prompt": "helpp my", "tokens": 3, "type": "command", "tone": "neutral", "timestamp": "21-06-2025 16:54:54"}
{"prompt": "hellooooo", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "21-06-2025 16:55:10"}
{"prompt": "hi pls help", "tokens": 3, "type": "command", "tone": "casual", "timestamp": "21-06-2025 16:55:16"}
{"prompt": "hello pls help", "tokens": 3, "type": "command", "tone": "casual", "timestamp": "21-06-2025 16:59:07"}
{"prompt": "hey there", "tokens": 2, "type": "command", "tone": "casual", "timestamp": "21-06-2025 16:59:32"}
{"prompt": "hey", "tokens": 1, "type": "command", "tone": "casual", "timestamp": "21-06-2025 17:00:42"}
{"prompt": "hey", "tokens": 1, "type": "command", "tone": "casual", "timestamp": "21-06-2025 17:06:29"}
{"prompt": "hello hey", "tokens": 2, "type": "command", "tone": "casual", "timestamp": "21-06-2025 17:07:00"}
{"prompt": "hey there pls help me i dont understand the state of the economy", "tokens": 13, "type": "command", "tone": "casual", "timestamp": "21-06-2025 22:19:52"}
{"prompt": "hey there  help me i dont understand the state of the economy", "tokens": 13, "type": "command", "tone": "neutral", "timestamp": "21-06-2025 22:21:11"}
{"prompt": "well like help me pls", "tokens": 5, "type": "command", "tone": "casual", "timestamp": "21-06-2025 22:24:48"}
{"prompt": "well help me pls", "tokens": 4, "type": "command", "tone": "casual", "timestamp": "21-06-2025 22:25:10"}
{"prompt": "hey there help me pls", "tokens": 5, "type": "command", "tone": "casual", "timestamp": "22-06-2025 10:26:52"}
{"prompt": "hey there help me pls", "tokens": 5, "type": "command", "tone": "casual", "timestamp": "22-06-2025 10:27:25"}
{"prompt": "hey there help me pls", "tokens": 5, "type": "command", "tone": "casual", "timestamp": "22-06-2025 10:28:37"}
{"prompt": "hey there help me pls", "tokens": 5, "type": "command", "tone": "casual", "timestamp": "22-06-2025 10:51:55"}
{"prompt": "hey there help me pls", "tokens": 5, "type": "command", "tone": "casual", "timestamp": "22-06-2025 10:52:55"}
{"prompt": "can you help me just like with this one task pls ", "tokens": 12, "type": "command", "tone": "casual", "timestamp": "23-06-2025 10:25:06"}
{"prompt": "hey there help me pls", "tokens": 5, "type": "command", "tone": "casual", "timestamp": "23-06-2025 15:51:50"}
{"prompt": "hey there help me pls", "tokens": 5, "type": "command", "tone": "casual", "timestamp": "23-06-2025 15:52:28"}
{"prompt": "hey could you maybe help me with this project", "tokens": 9, "type": "command", "tone": "polite", "timestamp": "24-06-2025 18:20:37"}
{"prompt": "hey could you maybe help me with this project", "tokens": 9, "type": "command", "tone": "polite", "timestamp": "24-06-2025 18:28:51"}
{"prompt": "hey could you maybe help me with this project", "tokens": 9, "type": "command", "tone": "polite", "timestamp": "24-06-2025 18:30:12"}
{"prompt": "hey could you maybe help me with this project", "tokens": 9, "type": "command", "tone": "polite", "timestamp": "24-06-2025 18:35:02"}
{"prompt": "hey could you maybe help me with this project lol", "tokens": 10, "type": "command", "tone": "polite", "timestamp": "24-06-2025 18:49:30", "word count": 10, "average word length": 4.0, "repetition ratio": 0.0, "filler word density": 0.2, "verbosity level": "low"}
{"prompt": "hey there hey can you help me thaanks", "tokens": 9, "type": "question", "tone": "casual", "timestamp": "24-06-2025 18:58:30", "word count": 8, "average word length": 3.75, "repetition ratio": 0.125, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "write me a blog post about AI", "tokens": 7, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 19:56:00", "word count": 7, "average word length": 3.2857142857142856, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "write me a blog post about AI", "tokens": 7, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 19:57:15", "word count": 7, "average word length": 3.2857142857142856, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "write me a blog post about AI", "tokens": 7, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 20:05:58", "word count": 7, "average word length": 3.2857142857142856, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "write me a blog post about AI", "tokens": 7, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 20:08:02", "word count": 7, "average word length": 3.2857142857142856, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "write me a blog post about AI", "tokens": 7, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 20:12:54", "word count": 7, "average word length": 3.2857142857142856, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "write me a blog post about AI", "tokens": 7, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 20:13:46", "word count": 7, "average word length": 3, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nhey there", "tokens": 5, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:30:39", "word count": 4, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nhey there", "tokens": 5, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:30:39", "word count": 4, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nhey there", "tokens": 5, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:30:39", "word count": 4, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nhihihih", "tokens": 7, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:32:21", "word count": 3, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nhihihih", "tokens": 7, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:32:21", "word count": 3, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nhihihih", "tokens": 7, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:32:21", "word count": 3, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nhuhuhu", "tokens": 7, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:33:25", "word count": 3, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nhuhuhu", "tokens": 7, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:33:25", "word count": 3, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nhuhuhu", "tokens": 7, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:33:25", "word count": 3, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nbruhhquqh", "tokens": 8, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:33:32", "word count": 3, "average word length": 6, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nbruhhquqh", "tokens": 8, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:33:32", "word count": 3, "average word length": 6, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nyolo", "tokens": 5, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:34:46", "word count": 3, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nyolo", "tokens": 5, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:34:46", "word count": 3, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nyolo", "tokens": 5, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:34:46", "word count": 3, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nyolooo", "tokens": 6, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:39:17", "word count": 3, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nyolooo", "tokens": 6, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:39:17", "word count": 3, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nyolooo", "tokens": 6, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:39:17", "word count": 3, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nyolaal", "tokens": 6, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:45:19", "word count": 3, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nyolaal", "tokens": 6, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:45:19", "word count": 3, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nyolaal", "tokens": 6, "type": "command", "tone": "polite", "timestamp": "28-06-2025 20:45:19", "word count": 3, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nhihih", "tokens": 6, "type": "command", "tone": "polite", "timestamp": "28-06-2025 21:26:54", "word count": 3, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nhihih", "tokens": 6, "type": "command", "tone": "polite", "timestamp": "28-06-2025 21:26:54", "word count": 3, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nhihih", "tokens": 6, "type": "command", "tone": "polite", "timestamp": "28-06-2025 21:26:54", "word count": 3, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nis this correct syntax to replace the you said in \"\\n lolol\"   userInput = userTurn.innerText.trim();\n        if (!userInput) return;\n        let promptText = userInput.replace(\"You said: \", \"\");\n        console.log(\"Captured prompt:\", promptText);", "tokens": 58, "type": "question", "tone": "polite", "timestamp": "28-06-2025 21:27:55", "word count": 30, "average word length": 7, "repetition ratio": 0.06666666666666667, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "You said:\nis this correct syntax to replace the you said in \"\\n lolol\"   userInput = userTurn.innerText.trim();\n        if (!userInput) return;\n        let promptText = userInput.replace(\"You said: \", \"\");\n        console.log(\"Captured prompt:\", promptText);", "tokens": 58, "type": "question", "tone": "polite", "timestamp": "28-06-2025 21:27:57", "word count": 30, "average word length": 7, "repetition ratio": 0.06666666666666667, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihi", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:29:37", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihi", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:29:37", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihi", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:29:38", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hoo", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:29:41", "word count": 1, "average word length": 3, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hoo", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:29:41", "word count": 1, "average word length": 3, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "write me a blog post about AI", "tokens": 7, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:31:23", "word count": 7, "average word length": 3, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hohoh", "tokens": 3, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:41:11", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hohoh", "tokens": 3, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:41:11", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hohoh", "tokens": 3, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:41:11", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "should i put the actual thing in .then (data => {\n      console.log(\"Backend response: \", data);\n      chrome.storage.local.set({\n      lastPrompt: {\n      \"token_count\":7,\"word count\":7,\"average word length\":3,\"type\":\"command\",\"tone\":\"neutral\",\"repetition ratio\":0.0,\"filler word density\":0.0,\"verbosity\":\"low\",\"simplified_prompt\":\"write me a blog post about ai\"}%           \n        // prompt: request.prompt,\n        // timestamp: new Date().toLocaleString(\"en-GB\")\n      }\n    },", "tokens": 120, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:43:14", "word count": 40, "average word length": 10, "repetition ratio": 0.075, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "should i put the actual thing in .then (data => {\n      console.log(\"Backend response: \", data);\n      chrome.storage.local.set({\n      lastPrompt: {\n      \"token_count\":7,\"word count\":7,\"average word length\":3,\"type\":\"command\",\"tone\":\"neutral\",\"repetition ratio\":0.0,\"filler word density\":0.0,\"verbosity\":\"low\",\"simplified_prompt\":\"write me a blog post about ai\"}%           \n        // prompt: request.prompt,\n        // timestamp: new Date().toLocaleString(\"en-GB\")\n      }\n    },", "tokens": 120, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:43:14", "word count": 40, "average word length": 10, "repetition ratio": 0.075, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "wait this is in my content.js, is that right", "tokens": 11, "type": "question", "tone": "casual", "timestamp": "28-06-2025 21:43:58", "word count": 9, "average word length": 4, "repetition ratio": 0.1111111111111111, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "wait this is in my content.js, is that right", "tokens": 11, "type": "question", "tone": "casual", "timestamp": "28-06-2025 21:43:58", "word count": 9, "average word length": 4, "repetition ratio": 0.1111111111111111, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "wait this is in my content.js, is that right", "tokens": 11, "type": "question", "tone": "casual", "timestamp": "28-06-2025 21:43:58", "word count": 9, "average word length": 4, "repetition ratio": 0.1111111111111111, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "wait sorry sorry this is in my background.js, im trying to solve the problem of getting the stats to show up in my popup .then (data => {\n      console.log(\"Backend response: \", data);\n      chrome.storage.local.set({\n      lastPrompt: {\n      \"token_count\":7,\"word count\":7,\"average word length\":3,\"type\":\"command\",\"tone\":\"neutral\",\"repetition ratio\":0.0,\"filler word density\":0.0,\"verbosity\":\"low\",\"simplified_prompt\":\"write me a blog post about ai\"}%           \n        // prompt: request.prompt,\n        // timestamp: new Date().toLocaleString(\"en-GB\")\n      }\n    },", "tokens": 139, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:44:55", "word count": 57, "average word length": 8, "repetition ratio": 0.14035087719298245, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "wait sorry sorry this is in my background.js, im trying to solve the problem of getting the stats to show up in my popup .then (data => {\n      console.log(\"Backend response: \", data);\n      chrome.storage.local.set({\n      lastPrompt: {\n      \"token_count\":7,\"word count\":7,\"average word length\":3,\"type\":\"command\",\"tone\":\"neutral\",\"repetition ratio\":0.0,\"filler word density\":0.0,\"verbosity\":\"low\",\"simplified_prompt\":\"write me a blog post about ai\"}%           \n        // prompt: request.prompt,\n        // timestamp: new Date().toLocaleString(\"en-GB\")\n      }\n    },", "tokens": 139, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:44:55", "word count": 57, "average word length": 8, "repetition ratio": 0.14035087719298245, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihih", "tokens": 3, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:48:32", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihih", "tokens": 3, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:48:32", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihih", "tokens": 3, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:48:32", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "i get this error Error handling response: TypeError: Cannot set properties of null (setting 'textContent')\n    at updatePopup (chrome-extension://llimafhlmhpgjncknmhodlifbcbadehm/popup.js:21:56)\n    at chrome-extension://llimafhlmhpgjncknmhodlifbcbadehm/popup.js:10:9", "tokens": 84, "type": "command", "tone": "casual", "timestamp": "28-06-2025 21:49:55", "word count": 20, "average word length": 12, "repetition ratio": 0.05, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "i get this error Error handling response: TypeError: Cannot set properties of null (setting 'textContent')\n    at updatePopup (chrome-extension://llimafhlmhpgjncknmhodlifbcbadehm/popup.js:21:56)\n    at chrome-extension://llimafhlmhpgjncknmhodlifbcbadehm/popup.js:10:9", "tokens": 84, "type": "command", "tone": "casual", "timestamp": "28-06-2025 21:49:55", "word count": 20, "average word length": 12, "repetition ratio": 0.05, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "he", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:53:49", "word count": 1, "average word length": 2, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "he", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:53:50", "word count": 1, "average word length": 2, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "he", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:53:50", "word count": 1, "average word length": 2, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihi", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:54:04", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihi", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 21:54:04", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yolo!", "tokens": 3, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 22:00:08", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yoyo", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 22:10:56", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yoyo", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 22:10:56", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yoyo", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 22:10:56", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yoyo", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 22:14:29", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihi", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 22:19:59", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihi", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 22:20:00", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihi", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 22:20:00", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hello", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 23:12:41", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hello", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 23:12:41", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hello", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 23:12:41", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "uoteoeo", "tokens": 4, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 23:12:49", "word count": 1, "average word length": 7, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "uoteoeo", "tokens": 4, "type": "command", "tone": "neutral", "timestamp": "28-06-2025 23:12:49", "word count": 1, "average word length": 7, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "i accidentally clicked something on figma and it made the text seethrough with borders pls help", "tokens": 19, "type": "command", "tone": "casual", "timestamp": "29-06-2025 12:34:22", "word count": 16, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0625, "verbosity level": "low"}
{"prompt": "i accidentally clicked something on figma and it made the text seethrough with borders pls help", "tokens": 19, "type": "command", "tone": "casual", "timestamp": "29-06-2025 12:34:28", "word count": 16, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0625, "verbosity level": "low"}
{"prompt": "no its some system setting where it changed all my frames", "tokens": 11, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 12:36:30", "word count": 11, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "no its some system setting where it changed all my frames", "tokens": 11, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 12:36:30", "word count": 11, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "no its some system setting where it changed all my frames", "tokens": 11, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 12:36:30", "word count": 11, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "no its some system setting where it changed all my frames", "tokens": 11, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 12:36:50", "word count": 11, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "give me some ideas for dashboard stats", "tokens": 7, "type": "command", "tone": "polite", "timestamp": "29-06-2025 12:46:56", "word count": 7, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "give me some ideas for dashboard stats", "tokens": 7, "type": "command", "tone": "polite", "timestamp": "29-06-2025 12:46:56", "word count": 7, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "give me some ideas for dashboard stats", "tokens": 7, "type": "command", "tone": "polite", "timestamp": "29-06-2025 12:47:03", "word count": 7, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "wait the ui is going in popup.js right so shouldnt it be in js\n2/2", "tokens": 20, "type": "question", "tone": "casual", "timestamp": "29-06-2025 16:30:32", "word count": 15, "average word length": 3, "repetition ratio": 0.06666666666666667, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yes pls generate that", "tokens": 4, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 16:31:04", "word count": 4, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.25, "verbosity level": "low"}
{"prompt": "yes pls generate that", "tokens": 4, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 16:31:04", "word count": 4, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.25, "verbosity level": "low"}
{"prompt": "yes pls generate that", "tokens": 4, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 16:31:05", "word count": 4, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.25, "verbosity level": "low"}
{"prompt": "yes pls generate that", "tokens": 4, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 16:31:15", "word count": 4, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.25, "verbosity level": "low"}
{"prompt": "yes pls generate that", "tokens": 4, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 16:34:18", "word count": 4, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.25, "verbosity level": "low"}
{"prompt": "yes give me popup.js", "tokens": 5, "type": "command", "tone": "polite", "timestamp": "29-06-2025 16:34:35", "word count": 4, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yes give me popup.js", "tokens": 5, "type": "command", "tone": "polite", "timestamp": "29-06-2025 16:34:35", "word count": 4, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yes give me popup.js", "tokens": 5, "type": "command", "tone": "polite", "timestamp": "29-06-2025 16:34:36", "word count": 4, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yes give me popup.js", "tokens": 5, "type": "command", "tone": "polite", "timestamp": "29-06-2025 16:34:46", "word count": 4, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yes give me popup.js", "tokens": 5, "type": "command", "tone": "polite", "timestamp": "29-06-2025 16:36:06", "word count": 4, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yes give me popup.js", "tokens": 5, "type": "command", "tone": "polite", "timestamp": "29-06-2025 16:36:26", "word count": 4, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yes give me popup.js", "tokens": 5, "type": "command", "tone": "polite", "timestamp": "29-06-2025 16:36:42", "word count": 4, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yes give me popup.js", "tokens": 5, "type": "command", "tone": "polite", "timestamp": "29-06-2025 16:37:02", "word count": 4, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yes give me popup.js", "tokens": 5, "type": "command", "tone": "polite", "timestamp": "29-06-2025 16:37:05", "word count": 4, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yoooo", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 16:37:31", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yoooo", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 16:37:31", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yoooo", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 16:37:31", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihi", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 16:37:37", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihi", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 16:37:37", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihi", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 16:37:37", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihi", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 21:46:13", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihi", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 21:47:57", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihi", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 21:49:56", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "idk why the popup is long like this even after adjusting the width", "tokens": 14, "type": "question", "tone": "casual", "timestamp": "29-06-2025 21:50:11", "word count": 13, "average word length": 4, "repetition ratio": 0.07692307692307693, "filler word density": 0.07692307692307693, "verbosity level": "low"}
{"prompt": "idk why the popup is long like this even after adjusting the width", "tokens": 14, "type": "question", "tone": "casual", "timestamp": "29-06-2025 21:52:04", "word count": 13, "average word length": 4, "repetition ratio": 0.07692307692307693, "filler word density": 0.07692307692307693, "verbosity level": "low"}
{"prompt": "hihi", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 21:53:38", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihi", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 22:09:54", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihi", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 22:47:18", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hihi", "tokens": 2, "type": "command", "tone": "neutral", "timestamp": "29-06-2025 23:04:02", "word count": 1, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "theres this idea that men apply to jobs they feel 60% qualified for while women apply to jobs they feel 100% qualified for and id love to build a tool around that", "tokens": 37, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 09:51:49", "word count": 32, "average word length": 4, "repetition ratio": 0.28125, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "theres this idea that men apply to jobs they feel 60% qualified for while women apply to jobs they feel 100% qualified for and id love to build a tool around that", "tokens": 37, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 09:51:53", "word count": 32, "average word length": 4, "repetition ratio": 0.28125, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "e", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 10:02:04", "word count": 1, "average word length": 1, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "e", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 10:02:04", "word count": 1, "average word length": 1, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hello", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 12:38:18", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hello", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 12:38:44", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "should i use openai api or gemini cause i have to pay for openai right1) Add a /simplify endpoint that uses the OpenAI API\nRight now you only have \u201canalyze.\u201d Let\u2019s give your extension a real \u201cone-click rewrite\u201d:\n\npython\nCopy code\n# web_main.py (add these imports)\nimport os\nfrom openai import OpenAI\nfrom fastapi import HTTPException\n\n# initialize your OpenAI client (set OPENAI_API_KEY in your env)\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n@app.post(\"/simplify\")\nasync def simplify_prompt(data: PromptInput):\n    prompt = data.prompt\n    try:\n        resp = await client.chat.completions.create(\n            model=\"gpt-4o-mini\",\n            messages=[\n                {\"role\": \"system\", \"content\": \"You are a helpful assistant that rewrites user prompts to be clear, concise, and token-efficient.\"},\n                {\"role\": \"user\", \"content\": f\"Simplify this prompt for clarity and brevity:\\n\\n{prompt}\"}\n            ],\n            max_tokens=256,\n        )\n        simplified = resp.choices[0].message.content.strip()\n        return {\"simplified_prompt\": simplified}\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\nWhy this helps:\n\nYour extension \u201cClick to Simplify\u201d now truly hits GPT, not a stub.\n\nYou can log the simplified version alongside the analysis.\n\n2) Enhance your /analyze pipeline with more advanced metrics\nYou\u2019ve got word count, repetition, filler density\u2026 let\u2019s add:\n\nPart-of-speech tagging (e.g. ratio of nouns/verbs/adjectives via spaCy)\n\nReadability score (Flesch-Kincaid)\n\nSentiment polarity (VADER or TextBlob)\n\nExample addition:\n\npython\nCopy code\n# core/analyzer.py\nimport spacy, textstat\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n\nnlp = spacy.load(\"en_core_web_sm\")\nsent_analyzer = SentimentIntensityAnalyzer()\n\ndef analyze_prompt_extra(prompt: str) -> dict:\n    doc = nlp(prompt)\n    pos_counts = doc.count_by(spacy.attrs.POS)\n    total = len(doc)\n    pos_ratios = {doc.vocab[pos].text: count/total for pos, count in pos_counts.items()}\n    readability = textstat.flesch_reading_ease(prompt)\n    sentiment = sent_analyzer.polarity_scores(prompt)[\"compound\"]\n    return {\"pos_ratios\": pos_ratios,\n            \"readability\": readability,\n            \"sentiment\": sentiment}\nThen merge those fields into your /analyze response and log.\n\n3) Automate periodic summaries of your prompt history via the Automations tool\nYou could schedule a daily summary email (or an extension notification) with:\n\nNumber of prompts today\n\nAverage length\n\nTop 3 topics\n\nExample automation:\n\nxml\nCopy code\nBEGIN:VEVENT\nRRULE:FREQ=DAILY;BYHOUR=20;BYMINUTE=0;BYSECOND=0\nEND:VEVENT\nPrompt for the task:\n\n\u201cGenerate a summary of today\u2019s SmartPrompt usage: total prompts, average token count, top 3 topics.\u201d\n\n4) Persist logs to a lightweight database for more robust querying\nInstead of JSONL, spin up SQLite:\n\npython\nCopy code\nimport sqlite3\n\nconn = sqlite3.connect(\"data/prompts.db\")\nc = conn.cursor()\nc.execute(\"\"\"CREATE TABLE IF NOT EXISTS prompts (\n    id INTEGER PRIMARY KEY,\n    prompt TEXT,\n    type TEXT,\n    tone TEXT,\n    verbosity TEXT,\n    word_count INTEGER,\n    repetition REAL,\n    filler REAL,\n    simplified TEXT,\n    timestamp TEXT\n)\"\"\")\nconn.commit()\n\ndef log_to_db(record: dict):\n    c.execute(\"\"\"INSERT INTO prompts\n        (prompt,type,tone,verbosity,word_count,repetition,filler,simplified,timestamp)\n        VALUES (?,?,?,?,?,?,?,?,?)\"\"\",\n        (record[\"prompt\"], record[\"type\"], record[\"tone\"], record[\"verbosity\"],\n         record[\"word_count\"], record[\"repetition_ratio\"], record[\"filler_word_density\"],\n         record[\"simplified_prompt\"], record[\"timestamp\"]))\n    conn.commit()\nThen your /analyze endpoint calls log_to_db() instead of JSONL. You can add /stats endpoints to query aggregated data directly (e.g., SELECT COUNT(*), AVG(word_count)).\n\nNext Steps\nPick one of the above (start with /simplify).\n\nI can help you integrate the OpenAI call or the extra analysis metrics.\n\nOnce that\u2019s done, your front-end will have real, reliable data to pull in\u2014and we can circle back to fixing the CSS grid knowing the payloads are correct.\n\nLet me know which backend feature you\u2019d like to build out first!\n\n\n\n\n\n\n\nAsk ChatGPT", "tokens": 990, "type": "command", "tone": "polite", "timestamp": "30-06-2025 12:38:59", "word count": 477, "average word length": 7, "repetition ratio": 0.26834381551362685, "filler word density": 0.0020964360587002098, "verbosity level": "low"}
{"prompt": "should i use openai api or gemini cause i have to pay for openai right1) Add a /simplify endpoint that uses the OpenAI API\nRight now you only have \u201canalyze.\u201d Let\u2019s give your extension a real \u201cone-click rewrite\u201d:\n\npython\nCopy code\n# web_main.py (add these imports)\nimport os\nfrom openai import OpenAI\nfrom fastapi import HTTPException\n\n# initialize your OpenAI client (set OPENAI_API_KEY in your env)\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n@app.post(\"/simplify\")\nasync def simplify_prompt(data: PromptInput):\n    prompt = data.prompt\n    try:\n        resp = await client.chat.completions.create(\n            model=\"gpt-4o-mini\",\n            messages=[\n                {\"role\": \"system\", \"content\": \"You are a helpful assistant that rewrites user prompts to be clear, concise, and token-efficient.\"},\n                {\"role\": \"user\", \"content\": f\"Simplify this prompt for clarity and brevity:\\n\\n{prompt}\"}\n            ],\n            max_tokens=256,\n        )\n        simplified = resp.choices[0].message.content.strip()\n        return {\"simplified_prompt\": simplified}\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\nWhy this helps:\n\nYour extension \u201cClick to Simplify\u201d now truly hits GPT, not a stub.\n\nYou can log the simplified version alongside the analysis.\n\n2) Enhance your /analyze pipeline with more advanced metrics\nYou\u2019ve got word count, repetition, filler density\u2026 let\u2019s add:\n\nPart-of-speech tagging (e.g. ratio of nouns/verbs/adjectives via spaCy)\n\nReadability score (Flesch-Kincaid)\n\nSentiment polarity (VADER or TextBlob)\n\nExample addition:\n\npython\nCopy code\n# core/analyzer.py\nimport spacy, textstat\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n\nnlp = spacy.load(\"en_core_web_sm\")\nsent_analyzer = SentimentIntensityAnalyzer()\n\ndef analyze_prompt_extra(prompt: str) -> dict:\n    doc = nlp(prompt)\n    pos_counts = doc.count_by(spacy.attrs.POS)\n    total = len(doc)\n    pos_ratios = {doc.vocab[pos].text: count/total for pos, count in pos_counts.items()}\n    readability = textstat.flesch_reading_ease(prompt)\n    sentiment = sent_analyzer.polarity_scores(prompt)[\"compound\"]\n    return {\"pos_ratios\": pos_ratios,\n            \"readability\": readability,\n            \"sentiment\": sentiment}\nThen merge those fields into your /analyze response and log.\n\n3) Automate periodic summaries of your prompt history via the Automations tool\nYou could schedule a daily summary email (or an extension notification) with:\n\nNumber of prompts today\n\nAverage length\n\nTop 3 topics\n\nExample automation:\n\nxml\nCopy code\nBEGIN:VEVENT\nRRULE:FREQ=DAILY;BYHOUR=20;BYMINUTE=0;BYSECOND=0\nEND:VEVENT\nPrompt for the task:\n\n\u201cGenerate a summary of today\u2019s SmartPrompt usage: total prompts, average token count, top 3 topics.\u201d\n\n4) Persist logs to a lightweight database for more robust querying\nInstead of JSONL, spin up SQLite:\n\npython\nCopy code\nimport sqlite3\n\nconn = sqlite3.connect(\"data/prompts.db\")\nc = conn.cursor()\nc.execute(\"\"\"CREATE TABLE IF NOT EXISTS prompts (\n    id INTEGER PRIMARY KEY,\n    prompt TEXT,\n    type TEXT,\n    tone TEXT,\n    verbosity TEXT,\n    word_count INTEGER,\n    repetition REAL,\n    filler REAL,\n    simplified TEXT,\n    timestamp TEXT\n)\"\"\")\nconn.commit()\n\ndef log_to_db(record: dict):\n    c.execute(\"\"\"INSERT INTO prompts\n        (prompt,type,tone,verbosity,word_count,repetition,filler,simplified,timestamp)\n        VALUES (?,?,?,?,?,?,?,?,?)\"\"\",\n        (record[\"prompt\"], record[\"type\"], record[\"tone\"], record[\"verbosity\"],\n         record[\"word_count\"], record[\"repetition_ratio\"], record[\"filler_word_density\"],\n         record[\"simplified_prompt\"], record[\"timestamp\"]))\n    conn.commit()\nThen your /analyze endpoint calls log_to_db() instead of JSONL. You can add /stats endpoints to query aggregated data directly (e.g., SELECT COUNT(*), AVG(word_count)).\n\nNext Steps\nPick one of the above (start with /simplify).\n\nI can help you integrate the OpenAI call or the extra analysis metrics.\n\nOnce that\u2019s done, your front-end will have real, reliable data to pull in\u2014and we can circle back to fixing the CSS grid knowing the payloads are correct.\n\nLet me know which backend feature you\u2019d like to build out first!\n\n\n\n\n\n\n\nAsk ChatGPT", "tokens": 990, "type": "command", "tone": "polite", "timestamp": "30-06-2025 12:38:59", "word count": 477, "average word length": 7, "repetition ratio": 0.26834381551362685, "filler word density": 0.0020964360587002098, "verbosity level": "low"}
{"prompt": "should i use openai api or gemini cause i have to pay for openai right1) Add a /simplify endpoint that uses the OpenAI API\nRight now you only have \u201canalyze.\u201d Let\u2019s give your extension a real \u201cone-click rewrite\u201d:\n\npython\nCopy code\n# web_main.py (add these imports)\nimport os\nfrom openai import OpenAI\nfrom fastapi import HTTPException\n\n# initialize your OpenAI client (set OPENAI_API_KEY in your env)\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n@app.post(\"/simplify\")\nasync def simplify_prompt(data: PromptInput):\n    prompt = data.prompt\n    try:\n        resp = await client.chat.completions.create(\n            model=\"gpt-4o-mini\",\n            messages=[\n                {\"role\": \"system\", \"content\": \"You are a helpful assistant that rewrites user prompts to be clear, concise, and token-efficient.\"},\n                {\"role\": \"user\", \"content\": f\"Simplify this prompt for clarity and brevity:\\n\\n{prompt}\"}\n            ],\n            max_tokens=256,\n        )\n        simplified = resp.choices[0].message.content.strip()\n        return {\"simplified_prompt\": simplified}\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\nWhy this helps:\n\nYour extension \u201cClick to Simplify\u201d now truly hits GPT, not a stub.\n\nYou can log the simplified version alongside the analysis.\n\n2) Enhance your /analyze pipeline with more advanced metrics\nYou\u2019ve got word count, repetition, filler density\u2026 let\u2019s add:\n\nPart-of-speech tagging (e.g. ratio of nouns/verbs/adjectives via spaCy)\n\nReadability score (Flesch-Kincaid)\n\nSentiment polarity (VADER or TextBlob)\n\nExample addition:\n\npython\nCopy code\n# core/analyzer.py\nimport spacy, textstat\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n\nnlp = spacy.load(\"en_core_web_sm\")\nsent_analyzer = SentimentIntensityAnalyzer()\n\ndef analyze_prompt_extra(prompt: str) -> dict:\n    doc = nlp(prompt)\n    pos_counts = doc.count_by(spacy.attrs.POS)\n    total = len(doc)\n    pos_ratios = {doc.vocab[pos].text: count/total for pos, count in pos_counts.items()}\n    readability = textstat.flesch_reading_ease(prompt)\n    sentiment = sent_analyzer.polarity_scores(prompt)[\"compound\"]\n    return {\"pos_ratios\": pos_ratios,\n            \"readability\": readability,\n            \"sentiment\": sentiment}\nThen merge those fields into your /analyze response and log.\n\n3) Automate periodic summaries of your prompt history via the Automations tool\nYou could schedule a daily summary email (or an extension notification) with:\n\nNumber of prompts today\n\nAverage length\n\nTop 3 topics\n\nExample automation:\n\nxml\nCopy code\nBEGIN:VEVENT\nRRULE:FREQ=DAILY;BYHOUR=20;BYMINUTE=0;BYSECOND=0\nEND:VEVENT\nPrompt for the task:\n\n\u201cGenerate a summary of today\u2019s SmartPrompt usage: total prompts, average token count, top 3 topics.\u201d\n\n4) Persist logs to a lightweight database for more robust querying\nInstead of JSONL, spin up SQLite:\n\npython\nCopy code\nimport sqlite3\n\nconn = sqlite3.connect(\"data/prompts.db\")\nc = conn.cursor()\nc.execute(\"\"\"CREATE TABLE IF NOT EXISTS prompts (\n    id INTEGER PRIMARY KEY,\n    prompt TEXT,\n    type TEXT,\n    tone TEXT,\n    verbosity TEXT,\n    word_count INTEGER,\n    repetition REAL,\n    filler REAL,\n    simplified TEXT,\n    timestamp TEXT\n)\"\"\")\nconn.commit()\n\ndef log_to_db(record: dict):\n    c.execute(\"\"\"INSERT INTO prompts\n        (prompt,type,tone,verbosity,word_count,repetition,filler,simplified,timestamp)\n        VALUES (?,?,?,?,?,?,?,?,?)\"\"\",\n        (record[\"prompt\"], record[\"type\"], record[\"tone\"], record[\"verbosity\"],\n         record[\"word_count\"], record[\"repetition_ratio\"], record[\"filler_word_density\"],\n         record[\"simplified_prompt\"], record[\"timestamp\"]))\n    conn.commit()\nThen your /analyze endpoint calls log_to_db() instead of JSONL. You can add /stats endpoints to query aggregated data directly (e.g., SELECT COUNT(*), AVG(word_count)).\n\nNext Steps\nPick one of the above (start with /simplify).\n\nI can help you integrate the OpenAI call or the extra analysis metrics.\n\nOnce that\u2019s done, your front-end will have real, reliable data to pull in\u2014and we can circle back to fixing the CSS grid knowing the payloads are correct.\n\nLet me know which backend feature you\u2019d like to build out first!\n\n\n\n\n\n\n\nAsk ChatGPT", "tokens": 990, "type": "command", "tone": "polite", "timestamp": "30-06-2025 12:39:10", "word count": 477, "average word length": 7, "repetition ratio": 0.26834381551362685, "filler word density": 0.0020964360587002098, "verbosity level": "low"}
{"prompt": "yes", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 12:40:52", "word count": 1, "average word length": 3, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yes", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 12:40:52", "word count": 1, "average word length": 3, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yes", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 12:40:52", "word count": 1, "average word length": 3, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "yes", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 12:40:59", "word count": 1, "average word length": 3, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "wait but i want to incorporate the llm call in my simplify function and then call that in web_main def simplify(user_input):\n    new_prompt = str(user_input).lower()\n    filler_word_count = 0\n    for word in filler_words:\n        if new_prompt.find(word) != -1:\n            filler_word_count += 1\n            new_prompt = re.sub(word, \"\", new_prompt)\n    for word in vague_words:\n        if new_prompt.find(word) != -1:\n            re.sub(word, vague_words[word][0], new_prompt)\n    new_prompt = re.sub(\"  \", \" \", new_prompt)\n    return new_prompt", "tokens": 132, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 12:44:12", "word count": 63, "average word length": 6, "repetition ratio": 0.3333333333333333, "filler word density": 0.0, "verbosity level": "medium"}
{"prompt": "wait but i want to incorporate the llm call in my simplify function and then call that in web_main def simplify(user_input):\n    new_prompt = str(user_input).lower()\n    filler_word_count = 0\n    for word in filler_words:\n        if new_prompt.find(word) != -1:\n            filler_word_count += 1\n            new_prompt = re.sub(word, \"\", new_prompt)\n    for word in vague_words:\n        if new_prompt.find(word) != -1:\n            re.sub(word, vague_words[word][0], new_prompt)\n    new_prompt = re.sub(\"  \", \" \", new_prompt)\n    return new_prompt", "tokens": 132, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 12:44:12", "word count": 63, "average word length": 6, "repetition ratio": 0.3333333333333333, "filler word density": 0.0, "verbosity level": "medium"}
{"prompt": "wait but i want to incorporate the llm call in my simplify function and then call that in web_main def simplify(user_input):\n    new_prompt = str(user_input).lower()\n    filler_word_count = 0\n    for word in filler_words:\n        if new_prompt.find(word) != -1:\n            filler_word_count += 1\n            new_prompt = re.sub(word, \"\", new_prompt)\n    for word in vague_words:\n        if new_prompt.find(word) != -1:\n            re.sub(word, vague_words[word][0], new_prompt)\n    new_prompt = re.sub(\"  \", \" \", new_prompt)\n    return new_prompt", "tokens": 132, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 12:44:19", "word count": 63, "average word length": 6, "repetition ratio": 0.3333333333333333, "filler word density": 0.0, "verbosity level": "medium"}
{"prompt": "how to add .env to gitignore # Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# UV\n#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#uv.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control\n.pdm.toml\n.pdm-python\n.pdm-build/\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\n# Abstra\n# Abstra is an AI-powered process automation framework.\n# Ignore directories containing user credentials, local state, and settings.\n# Learn more at https://abstra.io/docs\n.abstra/\n\n# Visual Studio Code\n#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore \n#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore\n#  and can be added to the global gitignore or merged into this file. However, if you prefer, \n#  you could uncomment the following to ignore the enitre vscode folder\n# .vscode/\n\n# Ruff stuff:\n.ruff_cache/\n\n# PyPI configuration file\n.pypirc\n\n# Cursor\n#  Cursor is an AI-powered code editor. .cursorignore specifies files/directories to\n#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data\n#  refer to https://docs.cursor.com/context/ignore-files\n.cursorignore\n.cursorindexingignore", "tokens": 1106, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 13:03:12", "word count": 568, "average word length": 7, "repetition ratio": 0.44190140845070425, "filler word density": 0.0017605633802816902, "verbosity level": "medium"}
{"prompt": "how to add .env to gitignore # Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# UV\n#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#uv.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control\n.pdm.toml\n.pdm-python\n.pdm-build/\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\n# Abstra\n# Abstra is an AI-powered process automation framework.\n# Ignore directories containing user credentials, local state, and settings.\n# Learn more at https://abstra.io/docs\n.abstra/\n\n# Visual Studio Code\n#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore \n#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore\n#  and can be added to the global gitignore or merged into this file. However, if you prefer, \n#  you could uncomment the following to ignore the enitre vscode folder\n# .vscode/\n\n# Ruff stuff:\n.ruff_cache/\n\n# PyPI configuration file\n.pypirc\n\n# Cursor\n#  Cursor is an AI-powered code editor. .cursorignore specifies files/directories to\n#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data\n#  refer to https://docs.cursor.com/context/ignore-files\n.cursorignore\n.cursorindexingignore", "tokens": 1106, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 13:03:12", "word count": 568, "average word length": 7, "repetition ratio": 0.44190140845070425, "filler word density": 0.0017605633802816902, "verbosity level": "medium"}
{"prompt": "how to add .env to gitignore # Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# UV\n#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#uv.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control\n.pdm.toml\n.pdm-python\n.pdm-build/\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\n# Abstra\n# Abstra is an AI-powered process automation framework.\n# Ignore directories containing user credentials, local state, and settings.\n# Learn more at https://abstra.io/docs\n.abstra/\n\n# Visual Studio Code\n#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore \n#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore\n#  and can be added to the global gitignore or merged into this file. However, if you prefer, \n#  you could uncomment the following to ignore the enitre vscode folder\n# .vscode/\n\n# Ruff stuff:\n.ruff_cache/\n\n# PyPI configuration file\n.pypirc\n\n# Cursor\n#  Cursor is an AI-powered code editor. .cursorignore specifies files/directories to\n#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data\n#  refer to https://docs.cursor.com/context/ignore-files\n.cursorignore\n.cursorindexingignore", "tokens": 1106, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 13:03:12", "word count": 568, "average word length": 7, "repetition ratio": 0.44190140845070425, "filler word density": 0.0017605633802816902, "verbosity level": "medium"}
{"prompt": "how to add .env to gitignore # Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# UV\n#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#uv.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control\n.pdm.toml\n.pdm-python\n.pdm-build/\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\n# Abstra\n# Abstra is an AI-powered process automation framework.\n# Ignore directories containing user credentials, local state, and settings.\n# Learn more at https://abstra.io/docs\n.abstra/\n\n# Visual Studio Code\n#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore \n#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore\n#  and can be added to the global gitignore or merged into this file. However, if you prefer, \n#  you could uncomment the following to ignore the enitre vscode folder\n# .vscode/\n\n# Ruff stuff:\n.ruff_cache/\n\n# PyPI configuration file\n.pypirc\n\n# Cursor\n#  Cursor is an AI-powered code editor. .cursorignore specifies files/directories to\n#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data\n#  refer to https://docs.cursor.com/context/ignore-files\n.cursorignore\n.cursorindexingignore", "tokens": 1106, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 13:03:22", "word count": 568, "average word length": 7, "repetition ratio": 0.44190140845070425, "filler word density": 0.0017605633802816902, "verbosity level": "medium"}
{"prompt": "how to add .env to gitignore # Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# UV\n#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#uv.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control\n.pdm.toml\n.pdm-python\n.pdm-build/\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\n# Abstra\n# Abstra is an AI-powered process automation framework.\n# Ignore directories containing user credentials, local state, and settings.\n# Learn more at https://abstra.io/docs\n.abstra/\n\n# Visual Studio Code\n#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore \n#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore\n#  and can be added to the global gitignore or merged into this file. However, if you prefer, \n#  you could uncomment the following to ignore the enitre vscode folder\n# .vscode/\n\n# Ruff stuff:\n.ruff_cache/\n\n# PyPI configuration file\n.pypirc\n\n# Cursor\n#  Cursor is an AI-powered code editor. .cursorignore specifies files/directories to\n#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data\n#  refer to https://docs.cursor.com/context/ignore-files\n.cursorignore\n.cursorindexingignore", "tokens": 1106, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 13:13:28", "word count": 568, "average word length": 7, "repetition ratio": 0.44190140845070425, "filler word density": 0.0017605633802816902, "verbosity level": "medium"}
{"prompt": "how to add .env to gitignore # Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# UV\n#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#uv.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control\n.pdm.toml\n.pdm-python\n.pdm-build/\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\n# Abstra\n# Abstra is an AI-powered process automation framework.\n# Ignore directories containing user credentials, local state, and settings.\n# Learn more at https://abstra.io/docs\n.abstra/\n\n# Visual Studio Code\n#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore \n#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore\n#  and can be added to the global gitignore or merged into this file. However, if you prefer, \n#  you could uncomment the following to ignore the enitre vscode folder\n# .vscode/\n\n# Ruff stuff:\n.ruff_cache/\n\n# PyPI configuration file\n.pypirc\n\n# Cursor\n#  Cursor is an AI-powered code editor. .cursorignore specifies files/directories to\n#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data\n#  refer to https://docs.cursor.com/context/ignore-files\n.cursorignore\n.cursorindexingignore", "tokens": 1106, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 13:13:48", "word count": 568, "average word length": 7, "repetition ratio": 0.44190140845070425, "filler word density": 0.0017605633802816902, "verbosity level": "medium"}
{"prompt": "(3.11.8) tanzilhussain@Tanzils-Air smartprompt % /Users/tanzilhussain/.pyenv/versions/3.11.8/bin/python /Users/tanzilhussain/smartprompt/web_main.py\n(3.11.8) tanzilhussain@Tanzils-Air smartprompt % curl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=GEMINI_API_KEY\" \\\n  -H 'Content-Type: application/json' \\\n  -X POST \\\n  -d '{\n    \"contents\": [\n      {\n        \"parts\": [\n          {\n            \"text\": \"Explain how AI works in a few words\"\n          }\n        ]\n      }\n    ]\n  }'\n{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"API key not valid. Please pass a valid API key.\",\n    \"status\": \"INVALID_ARGUMENT\",\n    \"details\": [\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.ErrorInfo\",\n        \"reason\": \"API_KEY_INVALID\",\n        \"domain\": \"googleapis.com\",\n        \"metadata\": {\n          \"service\": \"generativelanguage.googleapis.com\"\n        }\n      },\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.LocalizedMessage\",\n        \"locale\": \"en-US\",\n        \"message\": \"API key not valid. Please pass a valid API key.\"\n      }\n    ]\n  }\n}\n(3.11.8) tanzilhussain@Tanzils-Air smartprompt %", "tokens": 341, "type": "command", "tone": "polite", "timestamp": "30-06-2025 13:13:50", "word count": 99, "average word length": 9, "repetition ratio": 0.37373737373737376, "filler word density": 0.0, "verbosity level": "medium"}
{"prompt": "(3.11.8) tanzilhussain@Tanzils-Air smartprompt % /Users/tanzilhussain/.pyenv/versions/3.11.8/bin/python /Users/tanzilhussain/smartprompt/web_main.py\n(3.11.8) tanzilhussain@Tanzils-Air smartprompt % curl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=GEMINI_API_KEY\" \\\n  -H 'Content-Type: application/json' \\\n  -X POST \\\n  -d '{\n    \"contents\": [\n      {\n        \"parts\": [\n          {\n            \"text\": \"Explain how AI works in a few words\"\n          }\n        ]\n      }\n    ]\n  }'\n{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"API key not valid. Please pass a valid API key.\",\n    \"status\": \"INVALID_ARGUMENT\",\n    \"details\": [\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.ErrorInfo\",\n        \"reason\": \"API_KEY_INVALID\",\n        \"domain\": \"googleapis.com\",\n        \"metadata\": {\n          \"service\": \"generativelanguage.googleapis.com\"\n        }\n      },\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.LocalizedMessage\",\n        \"locale\": \"en-US\",\n        \"message\": \"API key not valid. Please pass a valid API key.\"\n      }\n    ]\n  }\n}\n(3.11.8) tanzilhussain@Tanzils-Air smartprompt %", "tokens": 341, "type": "command", "tone": "polite", "timestamp": "30-06-2025 13:13:50", "word count": 99, "average word length": 9, "repetition ratio": 0.37373737373737376, "filler word density": 0.0, "verbosity level": "medium"}
{"prompt": "(3.11.8) tanzilhussain@Tanzils-Air smartprompt % /Users/tanzilhussain/.pyenv/versions/3.11.8/bin/python /Users/tanzilhussain/smartprompt/web_main.py\n(3.11.8) tanzilhussain@Tanzils-Air smartprompt % curl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=GEMINI_API_KEY\" \\\n  -H 'Content-Type: application/json' \\\n  -X POST \\\n  -d '{\n    \"contents\": [\n      {\n        \"parts\": [\n          {\n            \"text\": \"Explain how AI works in a few words\"\n          }\n        ]\n      }\n    ]\n  }'\n{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"API key not valid. Please pass a valid API key.\",\n    \"status\": \"INVALID_ARGUMENT\",\n    \"details\": [\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.ErrorInfo\",\n        \"reason\": \"API_KEY_INVALID\",\n        \"domain\": \"googleapis.com\",\n        \"metadata\": {\n          \"service\": \"generativelanguage.googleapis.com\"\n        }\n      },\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.LocalizedMessage\",\n        \"locale\": \"en-US\",\n        \"message\": \"API key not valid. Please pass a valid API key.\"\n      }\n    ]\n  }\n}\n(3.11.8) tanzilhussain@Tanzils-Air smartprompt %", "tokens": 341, "type": "command", "tone": "polite", "timestamp": "30-06-2025 13:13:56", "word count": 99, "average word length": 9, "repetition ratio": 0.37373737373737376, "filler word density": 0.0, "verbosity level": "medium"}
{"prompt": "(3.11.8) tanzilhussain@Tanzils-Air smartprompt % /Users/tanzilhussain/.pyenv/versions/3.11.8/bin/python /Users/tanzilhussain/smartprompt/web_main.py\n(3.11.8) tanzilhussain@Tanzils-Air smartprompt % curl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=GEMINI_API_KEY\" \\\n  -H 'Content-Type: application/json' \\\n  -X POST \\\n  -d '{\n    \"contents\": [\n      {\n        \"parts\": [\n          {\n            \"text\": \"Explain how AI works in a few words\"\n          }\n        ]\n      }\n    ]\n  }'\n{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"API key not valid. Please pass a valid API key.\",\n    \"status\": \"INVALID_ARGUMENT\",\n    \"details\": [\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.ErrorInfo\",\n        \"reason\": \"API_KEY_INVALID\",\n        \"domain\": \"googleapis.com\",\n        \"metadata\": {\n          \"service\": \"generativelanguage.googleapis.com\"\n        }\n      },\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.LocalizedMessage\",\n        \"locale\": \"en-US\",\n        \"message\": \"API key not valid. Please pass a valid API key.\"\n      }\n    ]\n  }\n}\n(3.11.8) tanzilhussain@Tanzils-Air smartprompt %", "tokens": 341, "type": "command", "tone": "polite", "timestamp": "30-06-2025 13:13:57", "word count": 99, "average word length": 9, "repetition ratio": 0.37373737373737376, "filler word density": 0.0, "verbosity level": "medium"}
{"prompt": "(3.11.8) tanzilhussain@Tanzils-Air smartprompt % /Users/tanzilhussain/.pyenv/versions/3.11.8/bin/python /Users/tanzilhussain/smartprompt/web_main.py\n(3.11.8) tanzilhussain@Tanzils-Air smartprompt % curl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=GEMINI_API_KEY\" \\\n  -H 'Content-Type: application/json' \\\n  -X POST \\\n  -d '{\n    \"contents\": [\n      {\n        \"parts\": [\n          {\n            \"text\": \"Explain how AI works in a few words\"\n          }\n        ]\n      }\n    ]\n  }'\n{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"API key not valid. Please pass a valid API key.\",\n    \"status\": \"INVALID_ARGUMENT\",\n    \"details\": [\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.ErrorInfo\",\n        \"reason\": \"API_KEY_INVALID\",\n        \"domain\": \"googleapis.com\",\n        \"metadata\": {\n          \"service\": \"generativelanguage.googleapis.com\"\n        }\n      },\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.LocalizedMessage\",\n        \"locale\": \"en-US\",\n        \"message\": \"API key not valid. Please pass a valid API key.\"\n      }\n    ]\n  }\n}\n(3.11.8) tanzilhussain@Tanzils-Air smartprompt %", "tokens": 341, "type": "command", "tone": "polite", "timestamp": "30-06-2025 13:27:34", "word count": 99, "average word length": 9, "repetition ratio": 0.37373737373737376, "filler word density": 0.0, "verbosity level": "medium"}
{"prompt": "help me write this excuse Hey Adarsh, I'm so sorry to cancel but an urgent work item just came up that", "tokens": 25, "type": "command", "tone": "casual", "timestamp": "30-06-2025 16:23:23", "word count": 21, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.047619047619047616, "verbosity level": "low"}
{"prompt": "help me write this excuse Hey Adarsh, I'm so sorry to cancel but an urgent work item just came up that", "tokens": 25, "type": "command", "tone": "casual", "timestamp": "30-06-2025 16:23:23", "word count": 21, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.047619047619047616, "verbosity level": "low"}
{"prompt": "help me write this excuse Hey Adarsh, I'm so sorry to cancel but an urgent work item just came up that", "tokens": 25, "type": "command", "tone": "casual", "timestamp": "30-06-2025 16:23:24", "word count": 21, "average word length": 4, "repetition ratio": 0.0, "filler word density": 0.047619047619047616, "verbosity level": "low"}
{"prompt": "but i dont want to meet with him", "tokens": 8, "type": "command", "tone": "casual", "timestamp": "30-06-2025 16:23:45", "word count": 8, "average word length": 3, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "but i dont want to meet with him", "tokens": 8, "type": "command", "tone": "casual", "timestamp": "30-06-2025 16:23:45", "word count": 8, "average word length": 3, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "but i dont want to meet with him", "tokens": 8, "type": "command", "tone": "casual", "timestamp": "30-06-2025 16:23:45", "word count": 8, "average word length": 3, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "but i dont want to meet with him", "tokens": 8, "type": "command", "tone": "casual", "timestamp": "30-06-2025 16:23:54", "word count": 8, "average word length": 3, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "help Really appreciate your time tho, I'm going on vacation this week for the long weekend but if you have some time la", "tokens": 25, "type": "command", "tone": "polite", "timestamp": "30-06-2025 16:27:30", "word count": 23, "average word length": 4, "repetition ratio": 0.043478260869565216, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "help Really appreciate your time tho, I'm going on vacation this week for the long weekend but if you have some time la", "tokens": 25, "type": "command", "tone": "polite", "timestamp": "30-06-2025 16:27:30", "word count": 23, "average word length": 4, "repetition ratio": 0.043478260869565216, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "help Really appreciate your time tho, I'm going on vacation this week for the long weekend but if you have some time la", "tokens": 25, "type": "command", "tone": "polite", "timestamp": "30-06-2025 16:27:32", "word count": 23, "average word length": 4, "repetition ratio": 0.043478260869565216, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "(3.11.8) tanzilhussain@Tanzils-Air smartprompt % /Users/tanzilhussain/.pyenv/versions/3.11.8/bin/python /Users/tanzilhussain/smartprompt/web_main.py\n(3.11.8) tanzilhussain@Tanzils-Air smartprompt % curl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=GEMINI_API_KEY\" \\\n  -H 'Content-Type: application/json' \\\n  -X POST \\\n  -d '{\n    \"contents\": [\n      {\n        \"parts\": [\n          {\n            \"text\": \"Explain how AI works in a few words\"\n          }\n        ]\n      }\n    ]\n  }'\n{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"API key not valid. Please pass a valid API key.\",\n    \"status\": \"INVALID_ARGUMENT\",\n    \"details\": [\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.ErrorInfo\",\n        \"reason\": \"API_KEY_INVALID\",\n        \"domain\": \"googleapis.com\",\n        \"metadata\": {\n          \"service\": \"generativelanguage.googleapis.com\"\n        }\n      },\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.LocalizedMessage\",\n        \"locale\": \"en-US\",\n        \"message\": \"API key not valid. Please pass a valid API key.\"\n      }\n    ]\n  }\n}\n(3.11.8) tanzilhussain@Tanzils-Air smartprompt %", "tokens": 341, "type": "command", "tone": "polite", "timestamp": "30-06-2025 16:42:34", "word count": 99, "average word length": 9, "repetition ratio": 0.37373737373737376, "filler word density": 0.0, "verbosity level": "medium"}
{"prompt": "hi", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 17:10:58", "word count": 1, "average word length": 2, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hello", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 17:11:01", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hello", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 17:11:02", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hello", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 17:11:03", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hello", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 17:11:03", "word count": 1, "average word length": 5, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "(3.11.8) tanzilhussain@Tanzils-Air smartprompt % /Users/tanzilhussain/.pyenv/versions/3.11.8/bin/python /Users/tanzilhussain/smartprompt/web_main.py\n(3.11.8) tanzilhussain@Tanzils-Air smartprompt % curl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=GEMINI_API_KEY\" \\\n  -H 'Content-Type: application/json' \\\n  -X POST \\\n  -d '{\n    \"contents\": [\n      {\n        \"parts\": [\n          {\n            \"text\": \"Explain how AI works in a few words\"\n          }\n        ]\n      }\n    ]\n  }'\n{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"API key not valid. Please pass a valid API key.\",\n    \"status\": \"INVALID_ARGUMENT\",\n    \"details\": [\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.ErrorInfo\",\n        \"reason\": \"API_KEY_INVALID\",\n        \"domain\": \"googleapis.com\",\n        \"metadata\": {\n          \"service\": \"generativelanguage.googleapis.com\"\n        }\n      },\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.LocalizedMessage\",\n        \"locale\": \"en-US\",\n        \"message\": \"API key not valid. Please pass a valid API key.\"\n      }\n    ]\n  }\n}\n(3.11.8) tanzilhussain@Tanzils-Air smartprompt %", "tokens": 341, "type": "command", "tone": "polite", "timestamp": "30-06-2025 17:31:13", "word count": 99, "average word length": 9, "repetition ratio": 0.37373737373737376, "filler word density": 0.0, "verbosity level": "medium"}
{"prompt": "hi", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 17:31:26", "word count": 1, "average word length": 2, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hi", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 17:31:26", "word count": 1, "average word length": 2, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
{"prompt": "hi", "tokens": 1, "type": "command", "tone": "neutral", "timestamp": "30-06-2025 17:31:27", "word count": 1, "average word length": 2, "repetition ratio": 0.0, "filler word density": 0.0, "verbosity level": "low"}
